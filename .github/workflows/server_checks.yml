on:
  workflow_call:

    inputs:

      python-version:
        description: >
          Python version used for installing and running ``pre-commit``.
        default: '3.12'
        required: false
        type: string

      skip-vm-management:
        description: >
            Whether to skip or not the start up of the virtual machine. Default
            value is ``false``.
        required: false
        default: false
        type: boolean

    secrets:

      AZURE_APP_ID:
        required: true

      AZURE_SECRET:
        required: true

      AZURE_TENANT_ID:
        required: true

      AZURE_RESOURCE_GROUP:
        required: true

      AZURE_VM_NAME:
        required: true

      CODECOV_TOKEN:
        required: true

      TEST_SERVER_URL:
        required: true

      TEST_SERVER_ADMIN_USER:
        required: true

      TEST_SERVER_ADMIN_PASS:
        required: true

      TEST_SERVER_USER:
        required: true

      TEST_SERVER_PASS:
        required: true

      PYANSYS_PYPI_PRIVATE_PAT:
        required: true

  workflow_dispatch:

concurrency:
  group: integration-server
  cancel-in-progress: false

# env:
#   PIP_INDEX_URL: "https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/"
#   POETRY_HTTP_BASIC_PRIVATE_PYPI_USERNAME: "PAT"
#   POETRY_HTTP_BASIC_PRIVATE_PYPI_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

jobs:

  start-vm:
    name: "Start Azure VM"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v4

      - name: "Start VM with Azure CLI"
        id: azure_cli
        uses: azure/CLI@v2
        if:   ${{ !(inputs.skip-vm-management)}}
        with:
          azcliversion: 2.32.0
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            az vm start -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n ${{ secrets.AZURE_VM_NAME_NEXT }}

      - name: "Set up Python ${{ inputs.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: "Check if server is ready"
        run: |
          python -m venv ./venv
          source ./venv/bin/activate
          pip install requests --disable-pip-version-check
          pip freeze
          python .github/scripts/check_server.py
        env:
          TEST_SL_URL: ${{secrets.TEST_SERVER_URL_NEXT}}
          TEST_USER: ${{secrets.TEST_SERVER_ADMIN_USER}}
          TEST_PASS: ${{secrets.TEST_SERVER_ADMIN_PASS}}

  integration-tests:
    name: "Integration tests in ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    needs: start-vm
    strategy:
      max-parallel: 1
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v4

      - name: "Set up Python ${{ inputs.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: "Install Python dependencies"
        run: |
          pip install poetry 'tox<4' --disable-pip-version-check

      - name: "Test with tox (integration tests only)"
        run: tox -e tests -- -m "integration"
        env:
          TEST_SL_URL: ${{secrets.TEST_SERVER_URL_NEXT}}
          TEST_LIST_ADMIN_USER: ${{secrets.TEST_SERVER_ADMIN_USER}}
          TEST_LIST_ADMIN_PASS: ${{secrets.TEST_SERVER_ADMIN_PASS}}
          TEST_LIST_USER: ${{secrets.TEST_SERVER_USER}}
          TEST_LIST_PASS: ${{secrets.TEST_SERVER_PASS}}

      - name: "Upload coverage artifacts"
        uses: actions/upload-artifact@v4
        if: ${{ matrix.os  == 'ubuntu-latest' }}
        with:
          name: coverage-html-integrationtests
          path: .cov/html
          retention-days: 7

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v4
        if: ${{ matrix.os  == 'ubuntu-latest' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: .cov/xml
          flags: integration
          fail_ci_if_error: true

  doc-build:
    name: "Build documentation"
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v8
        env:
          TEST_SL_URL: ${{secrets.TEST_SERVER_URL_NEXT}}
          TEST_USER: ${{secrets.TEST_SERVER_ADMIN_USER}}
          TEST_PASS: ${{secrets.TEST_SERVER_ADMIN_PASS}}
          BUILD_EXAMPLES: "true"
        with:
          check-links: false
          dependencies: "pandoc"
          sphinxopts: "-n -W --keep-going"

  check_workflow_runs:
    if: ${{ !cancelled() }}
    name: Check if there are active workflow runs
    needs: doc-build
    uses: ansys/pygranta/.github/workflows/check-concurrent-workflows.yml@main

  stop-vm:
    name: "Stop Azure VM"
    runs-on: ubuntu-latest
    needs: check_workflow_runs
    if: ${{ !cancelled() && !(inputs.skip-vm-management) && needs.check_workflow_runs.outputs.active-runs != 'true' }}
    steps:
      - uses: azure/CLI@v2
        with:
          azcliversion: 2.32.0
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            az vm deallocate -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n ${{ secrets.AZURE_VM_NAME_NEXT }} --no-wait
