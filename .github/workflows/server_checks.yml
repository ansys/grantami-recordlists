on:
  workflow_call:

    inputs:

      python-version:
        description: >
          Python version used for installing and running ``pre-commit``.
        default: '3.12'
        required: false
        type: string

      skip-vm-management:
        description: >
            Whether to skip or not the start up of the virtual machine. Default
            value is ``false``.
        required: false
        default: false
        type: boolean

    secrets:
      # Azure secrets
      AZURE_APP_ID:
        required: true
      AZURE_SECRET:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_RESOURCE_GROUP:
        required: true

      # Test server names
      AZURE_VM_NAME_DEV:
        required: true
      AZURE_VM_NAME_25R2:
        required: true
      AZURE_VM_NAME_25R1:
        required: true
      AZURE_VM_NAME_24R2:
        required: true
      AZURE_VM_NAME_24R1:
        required: true

      # Test server URLs
      TEST_SERVER_DEV_URL:
        required: true
      TEST_SERVER_25R2_URL:
        required: true
      TEST_SERVER_25R1_URL:
        required: true
      TEST_SERVER_24R2_URL:
        required: true
      TEST_SERVER_24R1_URL:
        required: true

      # Test server credentials
      TEST_SERVER_ADMIN_USER:
        required: true
      TEST_SERVER_ADMIN_PASS:
        required: true
      TEST_SERVER_USER:
        required: true
      TEST_SERVER_PASS:
        required: true

      PYANSYS_PYPI_PRIVATE_PAT:
        required: true
      CODECOV_TOKEN:
        required: true
  workflow_dispatch:

concurrency:
  group: integration-server
  cancel-in-progress: false

env:
  PIP_INDEX_URL: "https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/"
  POETRY_HTTP_BASIC_PRIVATE_PYPI_USERNAME: "PAT"
  POETRY_HTTP_BASIC_PRIVATE_PYPI_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

jobs:

  start-vm:
    name: "Start Azure VM"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server:
          - name: "AZURE_VM_NAME_DEV"
            url: "TEST_SERVER_DEV_URL"
          - name: "AZURE_VM_NAME_25R2"
            url: "TEST_SERVER_25R2_URL"
          - name: "AZURE_VM_NAME_25R1"
            url: "TEST_SERVER_25R1_URL"
          - name: "AZURE_VM_NAME_24R2"
            url: "TEST_SERVER_24R2_URL"
          - name: "AZURE_VM_NAME_24R1"
            url: "TEST_SERVER_24R1_URL"
    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: "Start VM with Azure CLI"
        id: azure_cli
        uses: azure/CLI@089eac9d8cc39f5d003e94f8b65efc51076c9cbd  #v2.1.0
        if:   ${{ !(inputs.skip-vm-management)}}
        with:
          azcliversion: 2.32.0
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            az vm start -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n ${{ secrets[matrix.server.name] }}

      - name: "Set up Python ${{ inputs.python-version }}"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: ${{ inputs.python-version }}

      - name: "Check if server is ready"
        run: |
          python -m venv ./venv
          source ./venv/bin/activate
          pip install requests --disable-pip-version-check
          pip freeze
          python .github/scripts/check_server.py
        env:
          TEST_SL_URL: ${{ secrets[matrix.server.url] }}
          TEST_USER: ${{secrets.TEST_SERVER_ADMIN_USER}}
          TEST_PASS: ${{secrets.TEST_SERVER_ADMIN_PASS}}

  integration-tests:
    name: "Integration tests: ${{ matrix.os }}, v${{ matrix.server.version }}"
    runs-on: ${{ matrix.os }}
    needs: start-vm
    strategy:
      matrix:
        os:
          - "ubuntu-latest"
          - "windows-latest"
        server:
          - url: "TEST_SERVER_DEV_URL"
            version: "25.2"
          - url: "TEST_SERVER_25R2_URL"
            version: "25.2"
          - url: "TEST_SERVER_25R1_URL"
            version: "25.1"
          - url: "TEST_SERVER_24R2_URL"
            version: "24.2"
          - url: "TEST_SERVER_24R1_URL"
            version: "24.1"
    concurrency:
      group: ${{ matrix.server.url }}
      cancel-in-progress: false
    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: "Set up Python ${{ inputs.python-version }}"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065  # v5.6.0
        with:
          python-version: ${{ inputs.python-version }}

      - name: "Install Python dependencies"
        run: |
          pip install poetry 'tox<4' --disable-pip-version-check

      - name: "Test with tox (integration tests only)"
        run: tox -e tests -- -m "integration" --mi-version ${{ matrix.server.version }}
        env:
          TEST_SL_URL: ${{ secrets[matrix.server.url] }}
          TEST_LIST_ADMIN_USER: ${{secrets.TEST_SERVER_ADMIN_USER}}
          TEST_LIST_ADMIN_PASS: ${{secrets.TEST_SERVER_ADMIN_PASS}}
          TEST_LIST_USER: ${{secrets.TEST_SERVER_USER}}
          TEST_LIST_PASS: ${{secrets.TEST_SERVER_PASS}}

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@ad3126e916f78f00edff4ed0317cf185271ccc2d  # v5.4.2
        if: ${{ matrix.os  == 'ubuntu-latest' }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: .cov/xml
          flags: integration-${{ matrix.os }}-${{ matrix.server.version }}
          fail_ci_if_error: true

  doc-build:
    name: "Build documentation"
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@2cf9a9c43235a000d613c2b13e64c954232a4553  # v9.0.9
        env:
          TEST_SL_URL: ${{secrets.TEST_SERVER_DEV_URL}}
          TEST_USER: ${{secrets.TEST_SERVER_ADMIN_USER}}
          TEST_PASS: ${{secrets.TEST_SERVER_ADMIN_PASS}}
          BUILD_EXAMPLES: "true"
        with:
          check-links: false
          dependencies: "pandoc"
          sphinxopts: "-n -W --keep-going"

  check-workflow-runs:
    if: ${{ !cancelled() }}
    name: Check if there are active workflow runs
    needs: doc-build
    uses: ansys/pygranta/.github/workflows/check-concurrent-workflows.yml@main

  stop-vm:
    name: "Stop Azure VM"
    runs-on: ubuntu-latest
    needs: check-workflow-runs
    if: ${{ !cancelled() && !(inputs.skip-vm-management) && needs.check-workflow-runs.outputs.active-runs != 'true' }}
    strategy:
      matrix:
        server:
          - "AZURE_VM_NAME_DEV"
          - "AZURE_VM_NAME_25R2"
          - "AZURE_VM_NAME_25R1"
          - "AZURE_VM_NAME_24R2"
          - "AZURE_VM_NAME_24R1"
    steps:
      - uses: azure/CLI@089eac9d8cc39f5d003e94f8b65efc51076c9cbd  #v2.1.0
        with:
          azcliversion: 2.32.0
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZURE_APP_ID }} -p ${{ secrets.AZURE_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            az vm deallocate -g ${{ secrets.AZURE_RESOURCE_GROUP }} -n ${{ secrets[matrix.server] }} --no-wait
