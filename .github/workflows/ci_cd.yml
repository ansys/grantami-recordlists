name: GitHub CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
  workflow_dispatch:

env:
  MAIN_PYTHON_VERSION: '3.8'
  DOCUMENTATION_CNAME: 'refactored-broccoli-35j5wg9.pages.github.io'
  LIBRARY_NAME: 'ansys-grantami-recordlists'
  LIBRARY_NAMESPACE: 'ansys.grantami.recordlists'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: pyansys/actions/code-style@v3
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - uses: pyansys/actions/doc-style@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  download-artifacts:
    name: "Download ServerAPI artifacts"
    runs-on: ubuntu-latest
    steps:

      - name: Download dependencies
        run: |
          python -m pip download ansys-grantami-serverapi-openapi==0.1.0.dev17 --index-url ${{ env.INDEX_URL }} --no-dependencies --pre -d deps
        env:
          INDEX_URL: https://${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}@pkgs.dev.azure.com/pyansys/_packaging/pyansys/pypi/simple/

      - name: Upload as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ansys-grantami-serverapi-openapi-wheel
          path: deps

  doc-build:
    name: "Build documentation"
    runs-on: ubuntu-latest
    needs: [ doc-style, download-artifacts ]
    steps:
      - uses: actions/checkout@v3
      - name: Download dependencies
        uses: actions/download-artifact@v3
        with:
          name: ansys-grantami-serverapi-openapi-wheel
          path: deps
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install pandoc
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip tox
          python -m pip install poetry~=1.3.0
      - name: Generate the documentation with tox
        run: tox -e doc

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html-no-examples
          path: .tox/doc_out/
          retention-days: 7

  smoke-tests:
    name: "Build and Smoke tests"
    runs-on: ${{ matrix.os }}
    needs: [code-style, download-artifacts]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v3
      - name: Download dependencies
        uses: actions/download-artifact@v3
        with:
          name: ansys-grantami-serverapi-openapi-wheel
          path: deps

      - uses: pyansys/actions/build-wheelhouse@v3
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          library-namespace: ${{ env.LIBRARY_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          checkout: false

  tests:
    name: "Unit tests"
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests]
    strategy:
      matrix:
       os: [ubuntu-latest, windows-latest]
       python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Download dependencies
        uses: actions/download-artifact@v3
        with:
          name: ansys-grantami-serverapi-openapi-wheel
          path: deps

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry tox tox-gh-actions
      - name: Test with tox
        run: tox -- -m "not integration"

      - name: "Upload coverage results"
        uses: actions/upload-artifact@v3
        if: matrix.python-version == ${{ env.MAIN_PYTHON_VERSION }}
        with:
          name: coverage-html
          path: .cov/html
          retention-days: 7

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [ tests ]
    steps:
      - uses: actions/checkout@v3

      - name: Download dependencies
        uses: actions/download-artifact@v3
        with:
          name: ansys-grantami-serverapi-openapi-wheel
          path: grantami-recordlists/grantami-recordlists/deps

      - uses: pyansys/actions/build-library@v3
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          checkout: false


  server_checks:
    name: "Server checks"
    needs: [tests]
    if: ${{ !startsWith( github.event.pull_request.head.ref, 'dependabot/') }}
    uses: ./.github/workflows/server_checks.yml
    with:
      skip_vm_management: ${{ vars.SKIP_VM_MANAGEMENT == 'true' }}
    secrets:
      inherit

  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: [server_checks]
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags')
    steps:
      - uses: pyansys/actions/doc-deploy-dev@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          doc-artifact-name: documentation-html

  release:
    name: "Release"
    runs-on: ubuntu-latest
    needs: [server_checks]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: pyansys/actions/doc-deploy-stable@v4
        name: "Deploy stable documentation"
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          doc-artifact-name: documentation-html

      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.LIBRARY_NAME }}-artifacts
          path: dist/${{ env.LIBRARY_NAME }}-artifacts/

      - uses: pyansys/actions/release-github@v4
        name: "Release to GitHub"
        with:
          library-name: ${{ env.LIBRARY_NAME }}

      - uses: pyansys/actions/release-pypi-private@v4
        name: "Release to private PyPI"
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      # TODO release to public PyPI
