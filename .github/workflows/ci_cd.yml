name: CI
on:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main
  workflow_dispatch:

env:
  MAIN_PYTHON_VERSION: '3.8'
  DOCUMENTATION_CNAME: 'recordlists.grantami.docs.pyansys.com'
  LIBRARY_NAME: 'ansys-grantami-recordlists'
  LIBRARY_NAMESPACE: 'ansys.grantami.recordlists'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          vale-version: "2.29.6"

  doc-build:
    name: "Build documentation (mock examples)"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install system dependencies"
        run: |
          sudo apt-get update && sudo apt-get install pandoc

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip tox
          python -m pip install poetry~=1.4.0

      - name: "Generate the documentation with tox"
        run: tox -e doc

      - name: "Upload HTML documentation"
        uses: actions/upload-artifact@v3
        with:
          name: documentation-html-mock-examples
          path: doc/_build/html
          retention-days: 7

  smoke-tests:
    name: "Build wheelhouse for latest Python versions"
    runs-on: ${{ matrix.os }}
    needs: code-style
    strategy:
       matrix:
           os: [ubuntu-latest, windows-latest]
           python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
      - uses: ansys/actions/build-wheelhouse@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: "Tests Python ${{ matrix.python-version }}, ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    needs: smoke-tests
    strategy:
      matrix:
       os: [ubuntu-latest, windows-latest]
       python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false
    steps:
      - name: "Checkout the repository"
        uses: actions/checkout@v4

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install Python dependencies"
        run: |
          python -m pip install --upgrade pip poetry tox

      - name: "Test with tox"
        run: tox -e tests -- -m "not integration"

      - name: "Upload coverage artifacts"
        uses: actions/upload-artifact@v3
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION && matrix.os == 'ubuntu-latest' && !startsWith( github.event.pull_request.head.ref, 'dependabot/') }}
        with:
          name: coverage-html-unittests
          path: .cov/html
          retention-days: 7

      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
        if: ${{ matrix.python-version == env.MAIN_PYTHON_VERSION && matrix.os == 'ubuntu-latest' && !startsWith( github.event.pull_request.head.ref, 'dependabot/') }}
        with:
          files: .cov/xml
          flags: unittests
          fail_ci_if_error: true

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [ doc-build, tests ]
    steps:
      - uses: ansys/actions/build-library@v4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  server-checks:
    name: "Server checks"
    needs: [tests]
    if: ${{ !startsWith( github.event.pull_request.head.ref, 'dependabot/') }}
    uses: ./.github/workflows/server_checks.yml
    with:
      skip-vm-management: ${{ vars.SKIP_VM_MANAGEMENT == 'true' }}
    secrets:
      inherit

  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: [server-checks]
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-dev@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          doc-artifact-name: documentation-html

  release:
    name: "Release"
    runs-on: ubuntu-latest
    needs: [build-library, server-checks]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/release-pypi-public@v4
        name: "Release to public PyPI"
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - uses: ansys/actions/release-github@v4
        name: "Release to GitHub"
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-stable@v4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          doc-artifact-name: documentation-html
