"""
Models
"""
from datetime import datetime
from typing import List, Optional, TYPE_CHECKING

from ansys.grantami.serverapi_openapi import models

if TYPE_CHECKING:
    from ansys.grantami.recordlists._connection import RecordListApiClient


class RecordList:
    """
    Describes a RecordList as obtained from the API
    """

    # TODO: this is a read-only model? Users would not need to create or modify it. Perhaps modify?
    def __init__(
        self,
        client: "RecordListApiClient",
        identifier: str,
        # metadata: Optional[Dict[str, Dict[str, object]]]=None,
        # parent_record_list_identifier: Optional[str]=None,
        created_timestamp: datetime,
        # created_user: models.GrantaServerApiListsDtoUserOrGroup=None,
        # last_modified_timestamp=None,
        # last_modified_user=None,
        # published_timestamp=None,
        # published_user=None,
        # is_revision=None,
        name: str,
        # description=None,
        # notes=None,
        published: bool,
        awaiting_approval: bool,
        # internal_use=None,
        items: Optional[List["RecordListItem"]] = None
    ):
        self._client = client
        self._identifier: str = identifier
        self._created_timestamp = created_timestamp
        self._name = name
        self._published = published
        self._awaiting_approval = awaiting_approval
        self._items = items

    @property
    def identifier(self) -> str:
        """
        Identifier of the Record List
        """
        return self._identifier

    @property
    def created_timestamp(self) -> datetime:
        """
        Datetime at which the Record List was created
        """
        return self._created_timestamp

    @property
    def name(self) -> str:
        """
        Name of the Record List
        """
        return self._name

    @property
    def published(self) -> bool:
        """
        Whether the Record List has been published or not.
        """
        return self._published

    @property
    def awaiting_approval(self) -> bool:
        """
        Whether the Record List is currently pending approval to be published or to be withdrawn.
        """
        return self._awaiting_approval

    def read_items(self):
        """
        Fetches items included in the RecordList via a request to ServerAPI
        """
        self._items = self._client.get_list_items(self._identifier)

    @property
    def items(self) -> List["RecordListItem"]:
        """
        Items included in the RecordList. Fetched from ServerAPI if not yet exported.
        """
        if self._items is None:
            self.read_items()
        return self._items

    def add_items(self, items: List["RecordListItem"]):
        """
        Add items to the RecordList and refreshes all items.
        Might be succesful even if the items are invalid references.
        """
        self._client.add_items_to_list(self._identifier, items)
        self.read_items()

    def remove_items(self, items: List["RecordListItem"]):
        """
        Remove items from the RecordList and refetches current items from ServerAPI.
        Might be successful even the items are not initially in the RecordList.
        """
        # TODO: API will accept removal of items that are not in the list.
        #  We could check here that items are in the list and raise an Exception if not, although it
        #  would require getting the items first.
        self._client.remove_items_from_list(self._identifier, items=items)
        self.read_items()

    @classmethod
    def from_model(cls, client, model: models.GrantaServerApiListsDtoRecordListHeader):
        """
        Instantiate from a model defined in the auto-generated client code.
        """
        return cls(
            client,
            model.identifier,
            model.created_timestamp,  # TODO typing issue in autogenerated code?
            model.name,
            model.published,
            model.awaiting_approval,
        )


class RecordListItem:
    # TODO add record guid and version, validate input (require one guid)

    def __init__(
        self,
        database_guid: str,
        table_guid: str,
        record_history_guid: str,
    ):
        self._database_guid: str = database_guid
        self._table_guid: str = table_guid
        self._record_history_guid: str = record_history_guid
        # self._record_guid = None
        # self._record_version = None

    @property
    def database_guid(self) -> str:
        return self._database_guid

    @database_guid.setter
    def database_guid(self, value: str):
        self._database_guid = value

    @property
    def table_guid(self) -> str:
        return self._table_guid

    @table_guid.setter
    def table_guid(self, value: str):
        self._table_guid = value

    @property
    def record_history_guid(self) -> str:
        return self._record_history_guid

    @record_history_guid.setter
    def record_history_guid(self, value: str):
        self._record_history_guid = value

    @classmethod
    def from_model(cls, model: models.GrantaServerApiListsDtoListItem):
        return cls(
            database_guid=model.database_guid,
            table_guid=model.table_guid,
            record_history_guid=model.record_history_guid,
        )

    def to_model(self) -> models.GrantaServerApiListsDtoListItem:
        """
        Instantiate from a model defined in the auto-generated client code.
        """
        return models.GrantaServerApiListsDtoListItem(
            database_guid=self.database_guid,
            table_guid=self.table_guid,
            record_history_guid=self.record_history_guid,
        )
