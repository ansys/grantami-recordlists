[
    {
        "objectID": "index",
        "href": "index.html#pygranta-recordlists-130",
        "title": "PyGranta RecordLists 1.3.0",
        "section": "PyGranta RecordLists 1.3.0",
        "text": "PyGranta RecordLists, a component of the PyGranta software suite, provides a\nPython interface to the Granta Lists API.\nLearn how to install PyGranta RecordLists in user mode and quickly\nbegin using it.\nUnderstand key concepts for using PyGranta RecordLists.\nUnderstand how to use Python to interact programmatically with\nPyGranta RecordLists.\nExplore examples that show how to use PyGranta RecordLists to\nperform many different types of operations.\nLearn how to contribute to the PyGranta RecordLists codebase or documentation.\nPyGranta RecordLists 1.3.0"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "This example shows how to connect to Granta MI and perform basic operations on record lists.\nGetting started"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#connect-to-granta-mi",
        "title": "Getting started > Connect to Granta MI",
        "section": "Connect to Granta MI",
        "text": "First, use the ansys.grantami.recordlists.Connection class to connect to the Granta MI server. The Connection class uses a fluent interface to build the connection, which is always invoked in the following sequence:\nSpecify your Granta MI Service Layer URL as a parameter to the Connection class.\nSpecify the authentication method using a Connection.with_...() method.\nUse the Connection.connect() method to finalize the connection.\nThis returns a client object, called client in these examples.\nConnect to Granta MI\nansys.grantami.recordlists.Connection\nConnection\nConnection\nConnection.with_...()\nConnection.connect()\nclient"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#create-a-new-record-list",
        "title": "Getting started > Create a new record list",
        "section": "Create a new record list",
        "text": "API operations expect a RecordList instance as input. For the purpose of this example, create a new record list, using the create_list method. It returns a RecordList instance.\nCreate a new record list\nRecordList\ncreate_list\nRecordList"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#get-the-details-of-an-existing-record-list",
        "title": "Getting started > Get the details of an existing record list",
        "section": "Get the details of an existing record list",
        "text": "The get_list method allows obtaining a RecordList instance from an existing record list unique identifier. This can be useful when the identifier is already known, for example if it has been obtained from the Favorites application or if it is hard-coded in the script configuration.\nGet the details of an existing record list\nget_list\nRecordList"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#get-all-record-lists",
        "title": "Getting started > Get all record lists",
        "section": "Get all record lists",
        "text": "Get all record lists"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#copy-a-record-list",
        "title": "Getting started > Copy a record list",
        "section": "Copy a record list",
        "text": "Copy a record list"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#update-a-record-list",
        "title": "Getting started > Update a record list",
        "section": "Update a record list",
        "text": "Update a record list"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#delete-a-record-list",
        "title": "Getting started > Delete a record list",
        "section": "Delete a record list",
        "text": "Delete a record list"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#read-the-items-in-a-record-list",
        "title": "Getting started > Read the items in a record list",
        "section": "Read the items in a record list",
        "text": "The list was created at the beginning of this example, so the list is currently empty.\nRead the items in a record list"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#add-items-to-a-record-list",
        "title": "Getting started > Add items to a record list",
        "section": "Add items to a record list",
        "text": "Add items to a list using add_items_to_list. Items are described using the database GUID, table GUID, and record history GUID.\nThen retrieve the items and confirm that the record list now includes the added items.\nAdd items to a record list\nadd_items_to_list"
    },
    {
        "objectID": "examples/00_basic_usage",
        "href": "examples/00_basic_usage.html#remove-items-from-a-record-list",
        "title": "Getting started > Remove items from a record list",
        "section": "Remove items from a record list",
        "text": "Remove items from a record list using remove_items_from_list.\nThen retrieve the items again and confirm that the record list is empty.\nRemove items from a record list\nremove_items_from_list"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#granta-mi-connection",
        "title": "Granta MI connection",
        "section": "Granta MI connection",
        "text": "Granta MI connection"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#connection-builder",
        "title": "Granta MI connection > Connection builder",
        "section": "Connection builder",
        "text": "Connects to a Granta MI ServerAPI instance.\nThis is a subclass of the ansys.openapi.common.ApiClientFactory class. All methods in\nthis class are documented as returning ApiClientFactory class\ninstances of the ansys.grantami.recordlists.Connection class instead.\nBase URL of the Granta MI Service Layer application.\nAdditional configuration settings for the requests session. The default is None, in which\ncase the SessionConfiguration class with default parameters\nis used.\nFor advanced usage, including configuring session-specific properties and timeouts, see the\nansys-openapi-common API reference. Specifically, see\nthe documentation for the ApiClientFactory base class and the\nSessionConfiguration class\nCreate the connection builder object and specify the server to connect to.\nSpecify the authentication method to use for the connection and provide credentials if\nrequired.\nConnect to the server, which returns the client object.\nThe examples show this process for different authentication methods.\nSet up client authentication for use with Kerberos (also known as integrated Windows authentication).\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine if Negotiate authentication is supported by the server. If so,\nNegotiate will then be used for authentication.\nIf Negotiate authentication is not supported by the server, an exception is raised.\nCurrent client factory object.\nIf the server does not support Negotiate authentication.\nRequires the user to have a valid Kerberos Ticket-Granting-Ticket (TGT).\nOn Windows, this is provided by default.\nOn Linux, this requires the [linux-kerberos] extension to be installed and your Kerberos installation\nto be configured correctly.\nSet up client authentication for use with provided credentials.\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine whether NTLM or Basic Authentication should be used. The selected\nauthentication scheme will then be configured for use.\nUsername for the connection.\nPassword for the connection.\nDomain to use for connection if required. The default is None.\nThe authentication scheme to use.\nAdded in version 2.1.\nAdded to\nApiClientFactory.with_credentials\nin version 2.1 of ansys-openapi-common.\nOriginal client factory object.\nIf the server does not support Basic or NTLM authentication (Windows clients only).\nNTLM authentication is not currently supported on Linux.\nSet up client authentication for use with OpenID Connect.\nAdditional configuration settings for the requests session when connected to the OpenID identity provider.\nBuilder object to authenticate via OIDC.\nOIDC Authentication requires the [oidc] extra to be installed.\nSet up client authentication for anonymous use.\nThis does not configure any authentication or authorization headers. Users must provide any\nauthentication information required themselves.\nClients relying on custom authentication such as client certificates or non-standard tokens\nshould use this method.\nOriginal client factory object.\nFinalize the RecordListsApiClient client and return it for use.\nAuthentication must be configured for this method to succeed.\nClient object that can be used to connect to Granta MI and interact with the record\nlist API.\nConnection builder\nansys.openapi.common.ApiClientFactory\nApiClientFactory\nansys.grantami.recordlists.Connection\npython:str\nSessionConfiguration\nNone\nSessionConfiguration\nApiClientFactory\nSessionConfiguration\nWWW-Authenticate\nApiClientFactory\nConnectionError\n[linux-kerberos]\nWWW-Authenticate\npython:str\npython:str\npython:str\nNone\nAuthenticationScheme\nApiClientFactory.with_credentials\nansys-openapi-common\nApiClientFactory\nConnectionError\nSessionConfiguration\nOIDCSessionBuilder\n[oidc]\nApiClientFactory\nRecordListsApiClient\nRecordListsApiClient"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.Connection",
        "title": "Granta MI connection > Connection builder > Connection",
        "section": "Connection builder > Connection",
        "text": "class Connection(servicelayer_url, session_configuration=None)\n\nConnects to a Granta MI ServerAPI instance.\n\nThis is a subclass of the ansys.openapi.common.ApiClientFactory class. All methods in\nthis class are documented as returning ApiClientFactory class\ninstances of the ansys.grantami.recordlists.Connection class instead.\n\nParameters\n\nservicelayer_url\n\npython:str\n\nBase URL of the Granta MI Service Layer application.\n\nsession_configuration\n\nSessionConfiguration, optional\n\nAdditional configuration settings for the requests session. The default is None, in which\ncase the SessionConfiguration class with default parameters\nis used.\n\nNotes\n\nFor advanced usage, including configuring session-specific properties and timeouts, see the\nansys-openapi-common API reference. Specifically, see\nthe documentation for the ApiClientFactory base class and the\nSessionConfiguration class\n\nCreate the connection builder object and specify the server to connect to.\n\nSpecify the authentication method to use for the connection and provide credentials if\nrequired.\n\nConnect to the server, which returns the client object.\n\nThe examples show this process for different authentication methods.\n\nExamples\n\n>>> client = Connection(\"http://my_mi_server/mi_servicelayer\").with_autologon().connect()\n>>> client\n<RecordListsApiClient: url=http://my_mi_server/mi_servicelayer>\n>>> client = (\n...     Connection(\"http://my_mi_server/mi_servicelayer\")\n...     .with_credentials(username=\"my_username\", password=\"my_password\")\n...     .connect()\n... )\n>>> client\n<RecordListsApiClient: url: http://my_mi_server/mi_servicelayer>\n\n!! processed by numpydoc !!\n\n\n\nwith_autologon()\n\nSet up client authentication for use with Kerberos (also known as integrated Windows authentication).\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine if Negotiate authentication is supported by the server. If so,\nNegotiate will then be used for authentication.\n\nIf Negotiate authentication is not supported by the server, an exception is raised.\n\nReturns\n\nApiClientFactory\n\nCurrent client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Negotiate authentication.\n\nNotes\n\nRequires the user to have a valid Kerberos Ticket-Granting-Ticket (TGT).\n\nOn Windows, this is provided by default.\n\nOn Linux, this requires the [linux-kerberos] extension to be installed and your Kerberos installation\nto be configured correctly.\n\n!! processed by numpydoc !!\n\n\n\nwith_credentials(username, password, domain=None, authentication_scheme=AuthenticationScheme.AUTO)\n\nSet up client authentication for use with provided credentials.\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine whether NTLM or Basic Authentication should be used. The selected\nauthentication scheme will then be configured for use.\n\nParameters\n\nusername\n\npython:str\n\nUsername for the connection.\n\npassword\n\npython:str\n\nPassword for the connection.\n\ndomain\n\npython:str, optional\n\nDomain to use for connection if required. The default is None.\n\nauthentication_scheme\n\nAuthenticationScheme\n\nThe authentication scheme to use.\n\nAdded in version 2.1.\n\nAdded to\nApiClientFactory.with_credentials\nin version 2.1 of ansys-openapi-common.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Basic or NTLM authentication (Windows clients only).\n\nNotes\n\nNTLM authentication is not currently supported on Linux.\n\n!! processed by numpydoc !!\n\n\n\nwith_oidc(idp_session_configuration=None)\n\nSet up client authentication for use with OpenID Connect.\n\nParameters\n\nidp_session_configuration\n\nSessionConfiguration, optional\n\nAdditional configuration settings for the requests session when connected to the OpenID identity provider.\n\nReturns\n\nOIDCSessionBuilder\n\nBuilder object to authenticate via OIDC.\n\nNotes\n\nOIDC Authentication requires the [oidc] extra to be installed.\n\n!! processed by numpydoc !!\n\n\n\nwith_anonymous()\n\nSet up client authentication for anonymous use.\n\nThis does not configure any authentication or authorization headers. Users must provide any\nauthentication information required themselves.\n\nClients relying on custom authentication such as client certificates or non-standard tokens\nshould use this method.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\n!! processed by numpydoc !!\n\n\n\nconnect()\n\nFinalize the RecordListsApiClient client and return it for use.\n\nAuthentication must be configured for this method to succeed.\n\nReturns\n\nRecordListsApiClient\n\nClient object that can be used to connect to Granta MI and interact with the record\nlist API.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.Connection.with_autologon",
        "title": "Granta MI connection > Connection builder > with_autologon",
        "section": "Connection builder > with_autologon",
        "text": "with_autologon()\n\nSet up client authentication for use with Kerberos (also known as integrated Windows authentication).\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine if Negotiate authentication is supported by the server. If so,\nNegotiate will then be used for authentication.\n\nIf Negotiate authentication is not supported by the server, an exception is raised.\n\nReturns\n\nApiClientFactory\n\nCurrent client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Negotiate authentication.\n\nNotes\n\nRequires the user to have a valid Kerberos Ticket-Granting-Ticket (TGT).\n\nOn Windows, this is provided by default.\n\nOn Linux, this requires the [linux-kerberos] extension to be installed and your Kerberos installation\nto be configured correctly.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.Connection.with_credentials",
        "title": "Granta MI connection > Connection builder > with_credentials",
        "section": "Connection builder > with_credentials",
        "text": "with_credentials(username, password, domain=None, authentication_scheme=AuthenticationScheme.AUTO)\n\nSet up client authentication for use with provided credentials.\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine whether NTLM or Basic Authentication should be used. The selected\nauthentication scheme will then be configured for use.\n\nParameters\n\nusername\n\npython:str\n\nUsername for the connection.\n\npassword\n\npython:str\n\nPassword for the connection.\n\ndomain\n\npython:str, optional\n\nDomain to use for connection if required. The default is None.\n\nauthentication_scheme\n\nAuthenticationScheme\n\nThe authentication scheme to use.\n\nAdded in version 2.1.\n\nAdded to\nApiClientFactory.with_credentials\nin version 2.1 of ansys-openapi-common.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Basic or NTLM authentication (Windows clients only).\n\nNotes\n\nNTLM authentication is not currently supported on Linux.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.Connection.with_oidc",
        "title": "Granta MI connection > Connection builder > with_oidc",
        "section": "Connection builder > with_oidc",
        "text": "with_oidc(idp_session_configuration=None)\n\nSet up client authentication for use with OpenID Connect.\n\nParameters\n\nidp_session_configuration\n\nSessionConfiguration, optional\n\nAdditional configuration settings for the requests session when connected to the OpenID identity provider.\n\nReturns\n\nOIDCSessionBuilder\n\nBuilder object to authenticate via OIDC.\n\nNotes\n\nOIDC Authentication requires the [oidc] extra to be installed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.Connection.with_anonymous",
        "title": "Granta MI connection > Connection builder > with_anonymous",
        "section": "Connection builder > with_anonymous",
        "text": "with_anonymous()\n\nSet up client authentication for anonymous use.\n\nThis does not configure any authentication or authorization headers. Users must provide any\nauthentication information required themselves.\n\nClients relying on custom authentication such as client certificates or non-standard tokens\nshould use this method.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.Connection.connect",
        "title": "Granta MI connection > Connection builder > connect",
        "section": "Connection builder > connect",
        "text": "connect()\n\nFinalize the RecordListsApiClient client and return it for use.\n\nAuthentication must be configured for this method to succeed.\n\nReturns\n\nRecordListsApiClient\n\nClient object that can be used to connect to Granta MI and interact with the record\nlist API.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#recordlists-client",
        "title": "Granta MI connection > RecordLists client",
        "section": "RecordLists client",
        "text": "Communicates with Granta MI.\nThis class is instantiated by the\nConnection class and should not be instantiated\ndirectly.\nGet the details of all record lists available for the current user.\nPerforms an HTTP request against the Granta MI Server API.\nList of available record lists.\nGet the details of a record list.\nPerforms an HTTP request against the Granta MI Server API.\nUnique identifier of the record list.\nSearch for record lists matching the provided criteria.\nPerforms multiple HTTP requests against the Server API.\nCriterion to use to filter lists.\nWhether the search results should include record list items.\nList of record lists matching the provided criterion.\nGet all items included in a record list.\nPerforms an HTTP request against the Granta MI Server API.\nRecord list for which items will be fetched.\nList of items included in the record list.\nGet all resolvable items included in a record list.\nIf an item cannot be resolved, it will not be returned. Performs multiple HTTP requests\nagainst the Granta MI Server API.\nAdded in version 1.2.\nRecord list for which items will be fetched.\nWhether to enable read-mode for users who ordinarily have write permissions. Has no\neffect for read-only users.\nList of items included in the record list.\nWhether an item can be resolved depends on the role the user has on the Granta MI server. As\na brief summary:\nIf the item doesn’t specify a version, this method tests if the user can access either the\nrecord or, if in a version-controlled table, a version of the record in any state. A\nrecord cannot be resolved if:\nIt has been deleted\nIt has been withdrawn and the user is a read user (version-controlled tables only)\nIt only has one unreleased version and the user is a read user (version-controlled\ntables only)\nIt is hidden by access control\nIf the item specifies a version, this method tests if the user can access that specific\nversion of the record. This condition only applies to version-controlled tables. A\nrecord version cannot be resolved if:\nIt is unreleased and the user is a read user\nIt has been withdrawn and the user is a read user\nIt is hidden by access control\nSince version control and access control is intended to allow and restrict access to records\nfor certain groups of users, this method may return different results for different users\ndepending on the configuration of Granta MI.\nAdd items to a record list.\nPerforms an HTTP request against the Granta MI Server API.\nItems are not validated against existing records on the server or existing items in the\nlist.\nRecord list in which items will be added.\nList of items to add to the record list.\nList of items included in the record list.\nRemove items from a record list.\nPerforms an HTTP request against the Granta MI Server API.\nAttempting to remove items that are not in the list will not result in an error.\nRecord list from which items will be removed.\nList of items to remove from the record list.\nList of items included in the record list.\nCreate a new record list with the provided arguments.\nPerforms an HTTP request against the Granta MI Server API.\nName of the record list.\nDescription of the record list.\nNotes of the record list.\nList of items to add to the record list.\nCreated record list details.\nDelete a record list.\nPerforms an HTTP request against the Granta MI Server API.\nRecord list to delete.\nUpdate a record list with the provided arguments.\nPerforms an HTTP request against the Granta MI Server API.\nRecord list to update.\nNew value for the name of the record list.\nNew value for the description of the record list. Set to None to delete an existing\nvalue.\nNew value for the notes of the record list. Set to None to delete an existing value.\nUpdated representation of the record list.\nCreate a copy of a record list.\nPerforms an HTTP request against the Granta MI Server API. The resulting list has a name\nprefixed by the original list name.\nRecord list to copy.\nRecord list created by the copy operation.\nRevise a record list.\nPerforms an HTTP request against the Granta MI Server API.\nRevising a list allows a user to create a personal copy of a published list and to modify\nits items or details. When the ‘in-revision’ list is published, it overwrites the original\nlist.\nRecord list to revise.\nRecord list created by the revision operation.\nRequest approval for a record list.\nPerforms an HTTP request against the Granta MI Server API.\nRequesting approval updates the awaiting approval status of the record list to True.\nRecord list for which approval is requested.\nUpdated representation of the record list.\nPublish a record list.\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be awaiting approval and not published already. Publishing the list updates\nthe status to published and resets the awaiting approval status.\nPublished lists can be viewed by all users and cannot be modified. To modify a published\nlist, use revise_list().\nRecord list to publish.\nUpdated representation of the record list.\nWithdraw a record list.\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be published and awaiting approval. Withdrawing the list updates\nthe published status to False and resets the awaiting approval status.\nAll existing subscriptions will be lost on withdrawal.\nRecord list to unpublish.\nUpdated representation of the record list.\nCancel a pending request for approval on a record list.\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be awaiting approval. Cancelling the approval request resets the awaiting\napproval status to False.\nRecord list for which to cancel the approval request.\nUpdated representation of the record list.\nSubscribe the current user to a record list.\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be published.\nRecord list to subscribe to.\nUnsubscribe the current user from a record list.\nPerforms an HTTP request against the Granta MI Server API.\nRecord list to unsubscribe from.\nRecordLists client\nConnection\npython:list\nRecordList\npython:str\nRecordList\nSearchCriterion\nBooleanCriterion\npython:list\nSearchResult\nRecordList\npython:list\nRecordListItem\nRecordList\npython:list\nRecordListItem\nRecordList\npython:list\nRecordListItem\npython:list\nRecordListItem\nRecordList\npython:list\nRecordListItem\npython:list\nRecordListItem\npython:str\npython:str\npython:None\npython:str\npython:None\npython:list\nRecordListItem\npython:None\nRecordList\nRecordList\nRecordList\npython:str\npython:str\npython:None\npython:str\npython:None\nRecordList\nRecordList\nRecordList\nRecordList\nRecordList\nawaiting approval\nTrue\nRecordList\nRecordList\nrevise_list()\nRecordList\nRecordList\nRecordList\nRecordList\nRecordList\nRecordList\nRecordList\npython:None\nRecordList\npython:None"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient",
        "title": "Granta MI connection > RecordLists client > RecordListsApiClient",
        "section": "RecordLists client > RecordListsApiClient",
        "text": "class RecordListsApiClient(session, service_layer_url, configuration)\n\nCommunicates with Granta MI.\n\nThis class is instantiated by the\nConnection class and should not be instantiated\ndirectly.\n\n!! processed by numpydoc !!\n\n\n\n\n\nget_all_lists()\n\nGet the details of all record lists available for the current user.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nReturns\n\npython:list of RecordList\n\nList of available record lists.\n\n!! processed by numpydoc !!\n\n\n\nget_list(identifier)\n\nGet the details of a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nidentifier\n\npython:str\n\nUnique identifier of the record list.\n\nReturns\n\nRecordList\n\n\n\n!! processed by numpydoc !!\n\n\n\nsearch_for_lists(criterion, include_items=False)\n\nSearch for record lists matching the provided criteria.\n\nPerforms multiple HTTP requests against the Server API.\n\nParameters\n\ncriterion\n\nSearchCriterion | BooleanCriterion\n\nCriterion to use to filter lists.\n\ninclude_items: bool\n\nWhether the search results should include record list items.\n\nReturns\n\npython:list of SearchResult\n\nList of record lists matching the provided criterion.\n\n!! processed by numpydoc !!\n\n\n\nget_list_items(record_list)\n\nGet all items included in a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list for which items will be fetched.\n\nReturns\n\npython:list of RecordListItem\n\nList of items included in the record list.\n\n!! processed by numpydoc !!\n\n\n\nget_resolvable_list_items(record_list, read_mode=False)\n\nGet all resolvable items included in a record list.\n\nIf an item cannot be resolved, it will not be returned. Performs multiple HTTP requests\nagainst the Granta MI Server API.\n\nAdded in version 1.2.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list for which items will be fetched.\n\nread_mode\n\nbool\n\nWhether to enable read-mode for users who ordinarily have write permissions. Has no\neffect for read-only users.\n\nReturns\n\npython:list of RecordListItem\n\nList of items included in the record list.\n\nNotes\n\nWhether an item can be resolved depends on the role the user has on the Granta MI server. As\na brief summary:\n\nIf the item doesn’t specify a version, this method tests if the user can access either the\nrecord or, if in a version-controlled table, a version of the record in any state. A\nrecord cannot be resolved if:\n\nIt has been deleted\n\nIt has been withdrawn and the user is a read user (version-controlled tables only)\n\nIt only has one unreleased version and the user is a read user (version-controlled\ntables only)\n\nIt is hidden by access control\n\nIf the item specifies a version, this method tests if the user can access that specific\nversion of the record. This condition only applies to version-controlled tables. A\nrecord version cannot be resolved if:\n\nIt is unreleased and the user is a read user\n\nIt has been withdrawn and the user is a read user\n\nIt is hidden by access control\n\nSince version control and access control is intended to allow and restrict access to records\nfor certain groups of users, this method may return different results for different users\ndepending on the configuration of Granta MI.\n\n!! processed by numpydoc !!\n\n\n\nadd_items_to_list(record_list, items)\n\nAdd items to a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nItems are not validated against existing records on the server or existing items in the\nlist.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list in which items will be added.\n\nitems\n\npython:list of RecordListItem\n\nList of items to add to the record list.\n\nReturns\n\npython:list of RecordListItem\n\nList of items included in the record list.\n\n!! processed by numpydoc !!\n\n\n\nremove_items_from_list(record_list, items)\n\nRemove items from a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nAttempting to remove items that are not in the list will not result in an error.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list from which items will be removed.\n\nitems\n\npython:list of RecordListItem\n\nList of items to remove from the record list.\n\nReturns\n\npython:list of RecordListItem\n\nList of items included in the record list.\n\n!! processed by numpydoc !!\n\n\n\ncreate_list(name, description=None, notes=None, items=None)\n\nCreate a new record list with the provided arguments.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nname\n\npython:str\n\nName of the record list.\n\ndescription\n\npython:str or python:None\n\nDescription of the record list.\n\nnotes\n\npython:str or python:None\n\nNotes of the record list.\n\nitems\n\npython:list of RecordListItem or python:None\n\nList of items to add to the record list.\n\nReturns\n\nRecordList\n\nCreated record list details.\n\n!! processed by numpydoc !!\n\n\n\ndelete_list(record_list)\n\nDelete a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to delete.\n\n!! processed by numpydoc !!\n\n\n\nupdate_list(record_list, *, name='_ArgNotProvided', description='_ArgNotProvided', notes='_ArgNotProvided')\n\nUpdate a record list with the provided arguments.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to update.\n\nname\n\npython:str, optional\n\nNew value for the name of the record list.\n\ndescription\n\npython:str or python:None, optional\n\nNew value for the description of the record list. Set to None to delete an existing\nvalue.\n\nnotes\n\npython:str or python:None, optional\n\nNew value for the notes of the record list. Set to None to delete an existing value.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!\n\n\n\ncopy_list(record_list)\n\nCreate a copy of a record list.\n\nPerforms an HTTP request against the Granta MI Server API. The resulting list has a name\nprefixed by the original list name.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to copy.\n\nReturns\n\nRecordList\n\nRecord list created by the copy operation.\n\n!! processed by numpydoc !!\n\n\n\nrevise_list(record_list)\n\nRevise a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nRevising a list allows a user to create a personal copy of a published list and to modify\nits items or details. When the ‘in-revision’ list is published, it overwrites the original\nlist.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to revise.\n\nReturns\n\nRecordList\n\nRecord list created by the revision operation.\n\n!! processed by numpydoc !!\n\n\n\nrequest_list_approval(record_list)\n\nRequest approval for a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nRequesting approval updates the awaiting approval status of the record list to True.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list for which approval is requested.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!\n\n\n\npublish_list(record_list)\n\nPublish a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be awaiting approval and not published already. Publishing the list updates\nthe status to published and resets the awaiting approval status.\nPublished lists can be viewed by all users and cannot be modified. To modify a published\nlist, use revise_list().\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to publish.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!\n\n\n\nunpublish_list(record_list)\n\nWithdraw a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be published and awaiting approval. Withdrawing the list updates\nthe published status to False and resets the awaiting approval status.\nAll existing subscriptions will be lost on withdrawal.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to unpublish.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!\n\n\n\ncancel_list_approval_request(record_list)\n\nCancel a pending request for approval on a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be awaiting approval. Cancelling the approval request resets the awaiting\napproval status to False.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list for which to cancel the approval request.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!\n\n\n\nsubscribe_to_list(record_list)\n\nSubscribe the current user to a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be published.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to subscribe to.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!\n\n\n\nunsubscribe_from_list(record_list)\n\nUnsubscribe the current user from a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to unsubscribe from.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.get_all_lists",
        "title": "Granta MI connection > RecordLists client > get_all_lists",
        "section": "RecordLists client > get_all_lists",
        "text": "get_all_lists()\n\nGet the details of all record lists available for the current user.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nReturns\n\npython:list of RecordList\n\nList of available record lists.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.get_list",
        "title": "Granta MI connection > RecordLists client > get_list",
        "section": "RecordLists client > get_list",
        "text": "get_list(identifier)\n\nGet the details of a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nidentifier\n\npython:str\n\nUnique identifier of the record list.\n\nReturns\n\nRecordList\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.search_for_lists",
        "title": "Granta MI connection > RecordLists client > search_for_lists",
        "section": "RecordLists client > search_for_lists",
        "text": "search_for_lists(criterion, include_items=False)\n\nSearch for record lists matching the provided criteria.\n\nPerforms multiple HTTP requests against the Server API.\n\nParameters\n\ncriterion\n\nSearchCriterion | BooleanCriterion\n\nCriterion to use to filter lists.\n\ninclude_items: bool\n\nWhether the search results should include record list items.\n\nReturns\n\npython:list of SearchResult\n\nList of record lists matching the provided criterion.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.get_list_items",
        "title": "Granta MI connection > RecordLists client > get_list_items",
        "section": "RecordLists client > get_list_items",
        "text": "get_list_items(record_list)\n\nGet all items included in a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list for which items will be fetched.\n\nReturns\n\npython:list of RecordListItem\n\nList of items included in the record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.get_resolvable_list_items",
        "title": "Granta MI connection > RecordLists client > get_resolvable_list_items",
        "section": "RecordLists client > get_resolvable_list_items",
        "text": "get_resolvable_list_items(record_list, read_mode=False)\n\nGet all resolvable items included in a record list.\n\nIf an item cannot be resolved, it will not be returned. Performs multiple HTTP requests\nagainst the Granta MI Server API.\n\nAdded in version 1.2.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list for which items will be fetched.\n\nread_mode\n\nbool\n\nWhether to enable read-mode for users who ordinarily have write permissions. Has no\neffect for read-only users.\n\nReturns\n\npython:list of RecordListItem\n\nList of items included in the record list.\n\nNotes\n\nWhether an item can be resolved depends on the role the user has on the Granta MI server. As\na brief summary:\n\nIf the item doesn’t specify a version, this method tests if the user can access either the\nrecord or, if in a version-controlled table, a version of the record in any state. A\nrecord cannot be resolved if:\n\nIt has been deleted\n\nIt has been withdrawn and the user is a read user (version-controlled tables only)\n\nIt only has one unreleased version and the user is a read user (version-controlled\ntables only)\n\nIt is hidden by access control\n\nIf the item specifies a version, this method tests if the user can access that specific\nversion of the record. This condition only applies to version-controlled tables. A\nrecord version cannot be resolved if:\n\nIt is unreleased and the user is a read user\n\nIt has been withdrawn and the user is a read user\n\nIt is hidden by access control\n\nSince version control and access control is intended to allow and restrict access to records\nfor certain groups of users, this method may return different results for different users\ndepending on the configuration of Granta MI.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.add_items_to_list",
        "title": "Granta MI connection > RecordLists client > add_items_to_list",
        "section": "RecordLists client > add_items_to_list",
        "text": "add_items_to_list(record_list, items)\n\nAdd items to a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nItems are not validated against existing records on the server or existing items in the\nlist.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list in which items will be added.\n\nitems\n\npython:list of RecordListItem\n\nList of items to add to the record list.\n\nReturns\n\npython:list of RecordListItem\n\nList of items included in the record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.remove_items_from_list",
        "title": "Granta MI connection > RecordLists client > remove_items_from_list",
        "section": "RecordLists client > remove_items_from_list",
        "text": "remove_items_from_list(record_list, items)\n\nRemove items from a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nAttempting to remove items that are not in the list will not result in an error.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list from which items will be removed.\n\nitems\n\npython:list of RecordListItem\n\nList of items to remove from the record list.\n\nReturns\n\npython:list of RecordListItem\n\nList of items included in the record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.create_list",
        "title": "Granta MI connection > RecordLists client > create_list",
        "section": "RecordLists client > create_list",
        "text": "create_list(name, description=None, notes=None, items=None)\n\nCreate a new record list with the provided arguments.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nname\n\npython:str\n\nName of the record list.\n\ndescription\n\npython:str or python:None\n\nDescription of the record list.\n\nnotes\n\npython:str or python:None\n\nNotes of the record list.\n\nitems\n\npython:list of RecordListItem or python:None\n\nList of items to add to the record list.\n\nReturns\n\nRecordList\n\nCreated record list details.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.delete_list",
        "title": "Granta MI connection > RecordLists client > delete_list",
        "section": "RecordLists client > delete_list",
        "text": "delete_list(record_list)\n\nDelete a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to delete.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.update_list",
        "title": "Granta MI connection > RecordLists client > update_list",
        "section": "RecordLists client > update_list",
        "text": "update_list(record_list, *, name='_ArgNotProvided', description='_ArgNotProvided', notes='_ArgNotProvided')\n\nUpdate a record list with the provided arguments.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to update.\n\nname\n\npython:str, optional\n\nNew value for the name of the record list.\n\ndescription\n\npython:str or python:None, optional\n\nNew value for the description of the record list. Set to None to delete an existing\nvalue.\n\nnotes\n\npython:str or python:None, optional\n\nNew value for the notes of the record list. Set to None to delete an existing value.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.copy_list",
        "title": "Granta MI connection > RecordLists client > copy_list",
        "section": "RecordLists client > copy_list",
        "text": "copy_list(record_list)\n\nCreate a copy of a record list.\n\nPerforms an HTTP request against the Granta MI Server API. The resulting list has a name\nprefixed by the original list name.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to copy.\n\nReturns\n\nRecordList\n\nRecord list created by the copy operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.revise_list",
        "title": "Granta MI connection > RecordLists client > revise_list",
        "section": "RecordLists client > revise_list",
        "text": "revise_list(record_list)\n\nRevise a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nRevising a list allows a user to create a personal copy of a published list and to modify\nits items or details. When the ‘in-revision’ list is published, it overwrites the original\nlist.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to revise.\n\nReturns\n\nRecordList\n\nRecord list created by the revision operation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.request_list_approval",
        "title": "Granta MI connection > RecordLists client > request_list_approval",
        "section": "RecordLists client > request_list_approval",
        "text": "request_list_approval(record_list)\n\nRequest approval for a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nRequesting approval updates the awaiting approval status of the record list to True.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list for which approval is requested.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.publish_list",
        "title": "Granta MI connection > RecordLists client > publish_list",
        "section": "RecordLists client > publish_list",
        "text": "publish_list(record_list)\n\nPublish a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be awaiting approval and not published already. Publishing the list updates\nthe status to published and resets the awaiting approval status.\nPublished lists can be viewed by all users and cannot be modified. To modify a published\nlist, use revise_list().\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to publish.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.unpublish_list",
        "title": "Granta MI connection > RecordLists client > unpublish_list",
        "section": "RecordLists client > unpublish_list",
        "text": "unpublish_list(record_list)\n\nWithdraw a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be published and awaiting approval. Withdrawing the list updates\nthe published status to False and resets the awaiting approval status.\nAll existing subscriptions will be lost on withdrawal.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to unpublish.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.cancel_list_approval_request",
        "title": "Granta MI connection > RecordLists client > cancel_list_approval_request",
        "section": "RecordLists client > cancel_list_approval_request",
        "text": "cancel_list_approval_request(record_list)\n\nCancel a pending request for approval on a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be awaiting approval. Cancelling the approval request resets the awaiting\napproval status to False.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list for which to cancel the approval request.\n\nReturns\n\nRecordList\n\nUpdated representation of the record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.subscribe_to_list",
        "title": "Granta MI connection > RecordLists client > subscribe_to_list",
        "section": "RecordLists client > subscribe_to_list",
        "text": "subscribe_to_list(record_list)\n\nSubscribe the current user to a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\nThe list must be published.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to subscribe to.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/connection",
        "href": "api/connection.html#ansys.grantami.recordlists.RecordListsApiClient.unsubscribe_from_list",
        "title": "Granta MI connection > RecordLists client > unsubscribe_from_list",
        "section": "RecordLists client > unsubscribe_from_list",
        "text": "unsubscribe_from_list(record_list)\n\nUnsubscribe the current user from a record list.\n\nPerforms an HTTP request against the Granta MI Server API.\n\nParameters\n\nrecord_list\n\nRecordList\n\nRecord list to unsubscribe from.\n\nReturns\n\npython:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Contribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#general-guidelines",
        "title": "Contribute > General guidelines",
        "section": "General guidelines",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys developer’s guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyGranta RecordLists.\nThe following contribution information is specific to PyGranta RecordLists.\nGeneral guidelines"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#developer-environment-setup",
        "title": "Contribute > Developer environment setup",
        "section": "Developer environment setup",
        "text": "PyGranta RecordLists uses Poetry for packaging and dependency management. Installation\ninformation is available in the Poetry documentation.\nInstalling PyGranta RecordLists in developer mode allows you to modify and enhance\nthe source.\nDeveloper environment setup"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-source-repository",
        "title": "Contribute > Clone the source repository",
        "section": "Clone the source repository",
        "text": "Run the following commands to clone and install the latest version of PyGranta RecordLists\nin editable mode, which ensures changes to the code are immediately visible in the environment.\nRunning these commands also installs the required development dependencies to run the tests,\nbuild the documentation, and build the package.\nClone the source repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#additional-tools",
        "title": "Contribute > Additional tools",
        "section": "Additional tools",
        "text": "Additional tools"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#pre-commit",
        "title": "Contribute > Pre-commit",
        "section": "Pre-commit",
        "text": "The style checks take advantage of pre-commit. Developers are not forced but\nencouraged to install this tool with this command:\nPre-commit"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#tox",
        "title": "Contribute > Tox",
        "section": "Tox",
        "text": "Tests can be run using tox. The project defines the tox environments in the tox.ini\nfile. The following tox environments are provided:\ntox -e style: Checks for coding style quality.\ntox -e tests: Runs all tests and checks code coverage. (For requirements, see ref_serveraccess.)\ntox -e doc: Checks the documentation-building process.\nOptionally, add the -- -m \"not integration\" suffix to the commands above to skip integration\ntests. For example, this command only runs tests that do not require a Granta MI instance:\nTox\ntox.ini\ntox -e style\ntox -e tests\ntox -e doc\n-- -m \"not integration\""
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#server-access",
        "title": "Contribute > Server access",
        "section": "Server access",
        "text": "As indicated in ref_software_requirements, running integration tests and building the examples\nrequires access to a valid Granta MI instance.\nExternal contributors might not have an instance of Granta MI at their disposal. Prior to creating a\npull request with the desired changes, they should make sure that unit tests pass (ref_tox),\nstatic code validation and styling pass (pre-commit), and that the\ndocumentation can be generated successfully without the examples\n(Documenting).\nContinuous Integration (CI) on GitHub is configured to run the integration tests and generate the\nfull documentation on creation and updates of pull requests. CI is not configured to run for pull\nrequests from forks. External contributions require approval from a maintainer for checks to run.\nServer access"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#code-formatting-and-styling",
        "title": "Contribute > Code formatting and styling",
        "section": "Code formatting and styling",
        "text": "This project adheres to PyAnsys styling and formatting recommendations. The easiest way to\nvalidate changes are compliant is to run this command:\nCode formatting and styling"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#documenting",
        "title": "Contribute > Documenting",
        "section": "Documenting",
        "text": "As per PyAnsys guidelines, the documentation is generated using Sphinx.\nFor building documentation, use the Sphinx Makefile:\nIf any changes have been made to the documentation, you should run\nSphinx directly with the following extra arguments:\nThe extra arguments ensure that all references are valid and turn warnings\ninto errors. CI uses the same configuration, so you should resolve any\nwarnings and errors locally before pushing changes.\nDocumenting"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#example-notebooks",
        "title": "Contribute > Example notebooks",
        "section": "Example notebooks",
        "text": "Examples are included in the documentation to give you more context around\nthe core capabilities described in ref_grantami_recordlists_api_reference.\nAdditional examples are welcomed, especially if they cover a key use case of the\npackage that has not yet been covered.\nThe example scripts are placed in the examples directory and are included\nin the documentation build if the environment variable BUILD_EXAMPLES is set\nto True. Otherwise, a different set of examples is run to validate the process.\nExamples are checked in as scripts using the light format. For more information,\nsee the Jupytext documentation. As part of the documentation-building\nprocess, the Python files are converted back into Jupyter notebooks and the output\ncells are populated by running the notebooks against a Granta MI instance.\nThis conversion between Jupyter notebooks and Python files is performed by\nnb-convert. Installation information is available in the nb-convert documentation.\nExample notebooks\nexamples\nBUILD_EXAMPLES\nTrue\nlight\nnb-convert"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyGranta RecordLists Issues page\nto report bugs and request new features. When possible, use the issue templates provided. If\nyour issue does not fit into one of these templates, click the link for opening a blank issue.\nIf you have general questions about the PyAnsys ecosystem, email pyansys.core@ansys.com.\nIf your question is specific to PyGranta RecordLists, ask your question in an issue as described in\nthe previous paragraph.\nPost issues"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "The API for PyGranta RecordLists comprises the following key areas:\nref_grantami_recordlists_connection describes how to connect to Granta MI Server API and provides details about the operations\navailable on the client.\nref_grantami_recordlists_models describes resources handled by the client.\nAPI reference"
    },
    {
        "objectID": "api/index",
        "href": "api/index.html#table-of-contents",
        "title": "API reference > Table of contents",
        "section": "Table of contents",
        "text": "Table of contents"
    },
    {
        "objectID": "examples/01_publishing_revising_withdrawing",
        "href": "examples/01_publishing_revising_withdrawing.html#publishing-revising-and-withdrawing-record-lists",
        "title": "Publishing, revising, and withdrawing record lists",
        "section": "Publishing, revising, and withdrawing record lists",
        "text": "This example shows how to connect to Granta MI and perform advanced operations on record lists, such as publishing, withdrawing, and revising a list. For more information about the concepts discussed here, see the Help in the Granta MI Favorites app.\nRunning this notebook requires permissions to request publication of, to publish, and to revise a record list. Contact your Granta MI administrator for more information.\nPublishing, revising, and withdrawing record lists"
    },
    {
        "objectID": "examples/01_publishing_revising_withdrawing",
        "href": "examples/01_publishing_revising_withdrawing.html#connect-to-granta-mi-and-create-a-record-list",
        "title": "Publishing, revising, and withdrawing record lists > Connect to Granta MI and create a record list",
        "section": "Connect to Granta MI and create a record list",
        "text": "Import the Connection class and create the connection. See the Getting started example for more details.\nCreate a record list for use in this example.\nRecord lists include two properties describing two aspects of their status: whether they are awaiting approval to be published, and whether they are currently published. Define a function to display the status properties.\nConnect to Granta MI and create a record list\nConnection"
    },
    {
        "objectID": "examples/01_publishing_revising_withdrawing",
        "href": "examples/01_publishing_revising_withdrawing.html#publish-a-record-list",
        "title": "Publishing, revising, and withdrawing record lists > Publish a record list",
        "section": "Publish a record list",
        "text": "A record list is proposed for publication by calling the request_list_approval method with the record list to be published.\nPublish the record list by using the publish_list method.\nPublish a record list\nrequest_list_approval\npublish_list"
    },
    {
        "objectID": "examples/01_publishing_revising_withdrawing",
        "href": "examples/01_publishing_revising_withdrawing.html#revise-a-record-list",
        "title": "Publishing, revising, and withdrawing record lists > Revise a record list",
        "section": "Revise a record list",
        "text": "A published record list cannot be modified directly. Instead, first create a revision of the published record list using the revise_list method. This creates an editable copy of the original record list (a list revision), and leaves the original record list unchanged.\nThe record list revision includes a property tracking the parent record list:\nModifications made to the list revision are applied to the original list when the list revision is published. Once the original list is updated, the list revision is deleted and is no longer available.\nRevise a record list\nrevise_list"
    },
    {
        "objectID": "examples/01_publishing_revising_withdrawing",
        "href": "examples/01_publishing_revising_withdrawing.html#withdraw-a-record-list",
        "title": "Publishing, revising, and withdrawing record lists > Withdraw a record list",
        "section": "Withdraw a record list",
        "text": "When a record list is in the published state, calling request_list_approval requests the withdrawal of that list.\nUse the unpublish_list method to withdraw a record list.\nWithdraw a record list\nrequest_list_approval\nunpublish_list"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "User guide"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#granta-mi-record-lists",
        "title": "User guide > Granta MI record lists",
        "section": "Granta MI record lists",
        "text": "Record lists are collections of records that can be used in any situation where it is useful to have\na persistent, server-side list of records. Records are explicitly added to a list by a user, and so\nthey do not need to have anything in common (as would be typical for a set of search results), and\nthey do not necessarily need to be in the same table or database. The user has complete flexibility\nin deciding which records to add to a list.\nThe record list management capability is available to users in the following front-end tools:\nOne MI, as Favorites\nThe MI Materials Gateway, as Favorites\nThis package\nHowever, since these front-ends all share a common implementation in Granta MI, record lists can be\ncreated, accessed, and modified in any front-end with full interoperability. The documentation in\nthis package is only concerned with this package. For more information about the other\ntools mentioned in the preceding list, consult the Granta MI Favorites\nand Granta MI Materials Gateway\ndocumentation.\nGranta MI record lists"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#record-list-operations",
        "title": "User guide > Record list operations",
        "section": "Record list operations",
        "text": "This package provides access to the following record list operations:\nManaging record lists, including creating, deleting, and modifying them\nModifying the contents of a record list\nSearching for record lists based on their properties and contents\nManaging the record list lifecycle, including publishing, revising, and un-publishing record lists\nSubscribing and unsubscribing the current user to published record lists\nNote that only the authenticated user can be subscribed and unsubscribed to record lists. A user\ncannot subscribe or unsubscribe other users to a list on their behalf.\nFor examples that illustrate these operations, see ref_grantami_recordlists_examples. For\ncomprehensive information on the API, see ref_grantami_recordlists_api_reference.\nRecord list operations"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#granta-mi-configuration",
        "title": "User guide > Granta MI configuration",
        "section": "Granta MI configuration",
        "text": "Any use of Granta MI requires the user to have permission to access the Granta MI Server. Some\nrecord lists operations require additional permissions specific to record lists. For more\ninformation, see the Granta MI Favorites documentation.\nGranta MI configuration"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "The following examples demonstrate key aspects of PyGranta RecordLists.\nUsers of the Granta MI Scripting Toolkit can find an example of interoperability in the Granta MI Scripting Toolkit\ndocumentation.\nExamples"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "Getting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#software-requirements",
        "title": "Getting started > Software requirements",
        "section": "Software requirements",
        "text": "To use this version of the ansys.grantami.recordlists package you must have access to a Granta MI 2024 R2 deployment.\nThe ansys.grantami.recordlists package currently supports Python from version 3.10 to version 3.13.\nSoftware requirements\nansys.grantami.recordlists\nansys.grantami.recordlists"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "To install the latest release from PyPI, use\nthis code:\nTo install a release compatible with a specific version of Granta MI, use the\nPyGranta meta-package with a requirement specifier:\nTo see which individual PyGranta package versions are installed with each version of the PyGranta metapackage, consult\nthe Package versions section of the PyGranta\ndocumentation.\nAlternatively, to install the latest development version from ansys-grantami-recordlists GitHub,\nuse this code:\nTo install a local development version with Git and Poetry, use this code:\nThe preceding code installs the package and allows you to modify it locally,\nwith your changes reflected in your Python setup after restarting the Python kernel.\nInstallation\nansys-grantami-recordlists"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#verify-your-installation",
        "title": "Getting started > Verify your installation",
        "section": "Verify your installation",
        "text": "Check that you can start the PyGranta RecordLists client from Python by running this code:\nThis example uses Windows-based autologon authentication. For all supported authentication schemes, see the OpenAPI-Common documentation.\nIf you see a response from the server, you have successfully installed PyGranta RecordLists and\ncan start using the RecordLists client. For more examples, see\nref_grantami_recordlists_examples. For comprehensive information on the API, see\nref_grantami_recordlists_api_reference.\nVerify your installation"
    },
    {
        "objectID": "examples/02_searching",
        "href": "examples/02_searching.html#searching",
        "title": "Searching",
        "section": "Searching",
        "text": "This notebook demonstrates how to search for record lists using SearchCriterion and BooleanCriterion.\nRunning this notebook requires permissions to request publication of, to publish, and to revise a record list. Contact your Granta MI administrator for more information.\nSearching\nSearchCriterion\nBooleanCriterion"
    },
    {
        "objectID": "examples/02_searching",
        "href": "examples/02_searching.html#connect-to-granta-mi-and-create-a-record-list",
        "title": "Searching > Connect to Granta MI and create a record list",
        "section": "Connect to Granta MI and create a record list",
        "text": "Import the Connection class and create the connection. See the Getting started example for more details.\nCreate some record lists for use in this example:\nidentifier_a: Published, empty\nidentifier_b: Published, populated\nidentifier_c: Revision of identifier_b\nidentifier_d: Unpublished\nSee the Publishing, revising, and withdrawing record lists example for more details.\nConnect to Granta MI and create a record list\nConnection\nidentifier_a\nidentifier_b\nidentifier_c\nidentifier_b\nidentifier_d"
    },
    {
        "objectID": "examples/02_searching",
        "href": "examples/02_searching.html#search-for-a-record-list-by-name",
        "title": "Searching > Search for a record list by name",
        "section": "Search for a record list by name",
        "text": "Use the name_contains keyword argument for the SearchCriterion constructor to specify a search criterion based on the record list name.\nSearch for a record list by name\nname_contains\nSearchCriterion"
    },
    {
        "objectID": "examples/02_searching",
        "href": "examples/02_searching.html#search-for-personal-record-lists",
        "title": "Searching > Search for ‘personal’ record lists",
        "section": "Search for ‘personal’ record lists",
        "text": "A ‘personal’ record list is a list that the current user has created for their own use. It is owned by the current user, is not published, is not awaiting approval, and is not a revision of another list. Lists are generally in this state if they are created in the Favorites or Explore apps and are not submitted for publication.\nTo search for a list of this type, use the SearchCriterion below. Set is_internal_use=False to exclude transient record lists created by Granta MI for internal use only, which would otherwise be returned by this search.\nSearch for ‘personal’ record lists\nSearchCriterion\nis_internal_use=False"
    },
    {
        "objectID": "examples/02_searching",
        "href": "examples/02_searching.html#search-for-a-record-list-by-contents",
        "title": "Searching > Search for a record list by contents",
        "section": "Search for a record list by contents",
        "text": "Search for record lists that contain a specific record with the contains_records keyword. Specifying include_items=True when calling search_for_lists will populate items on the results.\nSearch for a record list by contents\ncontains_records\ninclude_items=True\nsearch_for_lists\nitems"
    },
    {
        "objectID": "examples/02_searching",
        "href": "examples/02_searching.html#search-using-a-complex-criterion",
        "title": "Searching > Search using a complex criterion",
        "section": "Search using a complex criterion",
        "text": "Build complex queries with BooleanCriterion. For example, search for published record lists following the naming convention “Approved materials - {Material family}”, but specifically only metals and ceramics.\nSearch using a complex criterion\nBooleanCriterion"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#models",
        "title": "Models",
        "section": "Models",
        "text": "Models"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#record-list",
        "title": "Models > Record list",
        "section": "Record list",
        "text": "Describes a RecordList as obtained from the API.\nRead-only - do not directly instantiate or modify instances of this class.\nName of the Record List. Read-only.\nCan be updated via\nupdate_list().\nDescription of the Record List. Read-only.\nCan be updated via\nupdate_list().\nNotes about the Record List. Read-only.\nCan be updated via\nupdate_list().\nIdentifier of the Record List. Read-only.\nDatetime at which the Record List was created. Read-only.\nUser who created the Record List. Read-only.\nDatetime at which the Record List was last modified. Read-only.\nUser who last modified the Record List. Read-only.\nDatetime at which the Record List was published. Read-only.\nUser who published/withdrew the Record List. Read-only.\nWhether the Record List has been published or not. Read-only.\nWhether the Record List is a revision. Read-only.\nWhether the Record List is awaiting approval to be published or withdrawn. Read-only.\nWhether the Record List is for internal use only. Read-only.\nLists flagged as for internal use are periodically deleted from the system.\nIdentifier of the parent record list. Read-only.\nIs populated if the record list is a revision of another record list.\nRecord list\nupdate_list()\nupdate_list()\nupdate_list()"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList",
        "title": "Models > Record list > RecordList",
        "section": "Record list > RecordList",
        "text": "class RecordList(identifier, name, created_timestamp, created_user, published, is_revision, awaiting_approval, internal_use, description=None, notes=None, last_modified_timestamp=None, last_modified_user=None, published_timestamp=None, published_user=None, parent_record_list_identifier=None)\n\nDescribes a RecordList as obtained from the API.\n\nRead-only - do not directly instantiate or modify instances of this class.\n\n!! processed by numpydoc !!\n\n\n\n\n\nproperty name: str\n\nName of the Record List. Read-only.\n\nCan be updated via\nupdate_list().\n\n!! processed by numpydoc !!\n\n\n\nproperty description: str | None\n\nDescription of the Record List. Read-only.\n\nCan be updated via\nupdate_list().\n\n!! processed by numpydoc !!\n\n\n\nproperty notes: str | None\n\nNotes about the Record List. Read-only.\n\nCan be updated via\nupdate_list().\n\n!! processed by numpydoc !!\n\n\n\nproperty identifier: str\n\nIdentifier of the Record List. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty created_timestamp: datetime\n\nDatetime at which the Record List was created. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty created_user: UserOrGroup\n\nUser who created the Record List. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty last_modified_timestamp: datetime | None\n\nDatetime at which the Record List was last modified. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty last_modified_user: UserOrGroup | None\n\nUser who last modified the Record List. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty published_timestamp: datetime | None\n\nDatetime at which the Record List was published. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty published_user: UserOrGroup | None\n\nUser who published/withdrew the Record List. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty published: bool\n\nWhether the Record List has been published or not. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_revision: bool\n\nWhether the Record List is a revision. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty awaiting_approval: bool\n\nWhether the Record List is awaiting approval to be published or withdrawn. Read-only.\n\n!! processed by numpydoc !!\n\n\n\nproperty internal_use: bool\n\nWhether the Record List is for internal use only. Read-only.\n\nLists flagged as for internal use are periodically deleted from the system.\n\n!! processed by numpydoc !!\n\n\n\nproperty parent_record_list_identifier: str | None\n\nIdentifier of the parent record list. Read-only.\n\nIs populated if the record list is a revision of another record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.name",
        "title": "Models > Record list > name",
        "section": "Record list > name",
        "text": "property name: str\n\nName of the Record List. Read-only.\n\nCan be updated via\nupdate_list().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.description",
        "title": "Models > Record list > description",
        "section": "Record list > description",
        "text": "property description: str | None\n\nDescription of the Record List. Read-only.\n\nCan be updated via\nupdate_list().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.notes",
        "title": "Models > Record list > notes",
        "section": "Record list > notes",
        "text": "property notes: str | None\n\nNotes about the Record List. Read-only.\n\nCan be updated via\nupdate_list().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.identifier",
        "title": "Models > Record list > identifier",
        "section": "Record list > identifier",
        "text": "property identifier: str\n\nIdentifier of the Record List. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.created_timestamp",
        "title": "Models > Record list > created_timestamp",
        "section": "Record list > created_timestamp",
        "text": "property created_timestamp: datetime\n\nDatetime at which the Record List was created. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.created_user",
        "title": "Models > Record list > created_user",
        "section": "Record list > created_user",
        "text": "property created_user: UserOrGroup\n\nUser who created the Record List. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.last_modified_timestamp",
        "title": "Models > Record list > last_modified_timestamp",
        "section": "Record list > last_modified_timestamp",
        "text": "property last_modified_timestamp: datetime | None\n\nDatetime at which the Record List was last modified. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.last_modified_user",
        "title": "Models > Record list > last_modified_user",
        "section": "Record list > last_modified_user",
        "text": "property last_modified_user: UserOrGroup | None\n\nUser who last modified the Record List. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.published_timestamp",
        "title": "Models > Record list > published_timestamp",
        "section": "Record list > published_timestamp",
        "text": "property published_timestamp: datetime | None\n\nDatetime at which the Record List was published. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.published_user",
        "title": "Models > Record list > published_user",
        "section": "Record list > published_user",
        "text": "property published_user: UserOrGroup | None\n\nUser who published/withdrew the Record List. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.published",
        "title": "Models > Record list > published",
        "section": "Record list > published",
        "text": "property published: bool\n\nWhether the Record List has been published or not. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.is_revision",
        "title": "Models > Record list > is_revision",
        "section": "Record list > is_revision",
        "text": "property is_revision: bool\n\nWhether the Record List is a revision. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.awaiting_approval",
        "title": "Models > Record list > awaiting_approval",
        "section": "Record list > awaiting_approval",
        "text": "property awaiting_approval: bool\n\nWhether the Record List is awaiting approval to be published or withdrawn. Read-only.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.internal_use",
        "title": "Models > Record list > internal_use",
        "section": "Record list > internal_use",
        "text": "property internal_use: bool\n\nWhether the Record List is for internal use only. Read-only.\n\nLists flagged as for internal use are periodically deleted from the system.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordList.parent_record_list_identifier",
        "title": "Models > Record list > parent_record_list_identifier",
        "section": "Record list > parent_record_list_identifier",
        "text": "property parent_record_list_identifier: str | None\n\nIdentifier of the parent record list. Read-only.\n\nIs populated if the record list is a revision of another record list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#record-list-item",
        "title": "Models > Record list item",
        "section": "Record list item",
        "text": "Describes a RecordList item, generally a reference to a record in a Granta MI database.\nIf this item was returned by the RecordListsApiClient.get_resolvable_list_items() method,\nthen it guaranteed to be resolvable by the current user at the time it was generated. If this\nitem was returned by the RecordListsApiClient.get_list_items() then it is not guaranteed\nto be resolvable and care should be taken to ensure that the reference to the record is valid\nbefore using it.\nGUID of the database.\nGUID of the table.\nRecord History GUID.\nRecord version number - for records in version-controlled tables. If provided, the requested\nversion of the record is added to the list. If not provided, the list tracks the latest\navailable version of the record.\nDatabase GUID.\nTable GUID.\nRecord History GUID.\nRecord version number.\nRecord GUID.\nOnly populated if the RecordListItem has both been obtained via an API request and\nrepresents a specific version of a record. See the note on the record_version parameter\nfor this class for more details.\nRecord list item\nRecordList\nRecordListsApiClient.get_resolvable_list_items()\nRecordListsApiClient.get_list_items()\npython:str\npython:str\npython:str\npython:int\nRecordListItem\nrecord_version"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordListItem",
        "title": "Models > Record list item > RecordListItem",
        "section": "Record list item > RecordListItem",
        "text": "class RecordListItem(database_guid, table_guid, record_history_guid, record_version=None)\n\nDescribes a RecordList item, generally a reference to a record in a Granta MI database.\n\nIf this item was returned by the RecordListsApiClient.get_resolvable_list_items() method,\nthen it guaranteed to be resolvable by the current user at the time it was generated. If this\nitem was returned by the RecordListsApiClient.get_list_items() then it is not guaranteed\nto be resolvable and care should be taken to ensure that the reference to the record is valid\nbefore using it.\n\nParameters\n\ndatabase_guid\n\npython:str\n\nGUID of the database.\n\ntable_guid\n\npython:str\n\nGUID of the table.\n\nrecord_history_guid\n\npython:str\n\nRecord History GUID.\n\nrecord_version\n\npython:int, optional\n\nRecord version number - for records in version-controlled tables. If provided, the requested\nversion of the record is added to the list. If not provided, the list tracks the latest\navailable version of the record.\n\n!! processed by numpydoc !!\n\n\n\nproperty database_guid: str\n\nDatabase GUID.\n\n!! processed by numpydoc !!\n\n\n\nproperty table_guid: str\n\nTable GUID.\n\n!! processed by numpydoc !!\n\n\n\nproperty record_history_guid: str\n\nRecord History GUID.\n\n!! processed by numpydoc !!\n\n\n\nproperty record_version: int | None\n\nRecord version number.\n\n!! processed by numpydoc !!\n\n\n\nproperty record_guid: str | None\n\nRecord GUID.\n\nOnly populated if the RecordListItem has both been obtained via an API request and\nrepresents a specific version of a record. See the note on the record_version parameter\nfor this class for more details.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordListItem.database_guid",
        "title": "Models > Record list item > database_guid",
        "section": "Record list item > database_guid",
        "text": "property database_guid: str\n\nDatabase GUID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordListItem.table_guid",
        "title": "Models > Record list item > table_guid",
        "section": "Record list item > table_guid",
        "text": "property table_guid: str\n\nTable GUID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordListItem.record_history_guid",
        "title": "Models > Record list item > record_history_guid",
        "section": "Record list item > record_history_guid",
        "text": "property record_history_guid: str\n\nRecord History GUID.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordListItem.record_version",
        "title": "Models > Record list item > record_version",
        "section": "Record list item > record_version",
        "text": "property record_version: int | None\n\nRecord version number.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.RecordListItem.record_guid",
        "title": "Models > Record list item > record_guid",
        "section": "Record list item > record_guid",
        "text": "property record_guid: str | None\n\nRecord GUID.\n\nOnly populated if the RecordListItem has both been obtained via an API request and\nrepresents a specific version of a record. See the note on the record_version parameter\nfor this class for more details.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#user-and-user-groups",
        "title": "Models > User and user groups",
        "section": "User and user groups",
        "text": "Description of a Granta MI User or Group.\nRead-only - do not directly instantiate or modify instances of this class.\nRead-only identifier of the user or group.\nRead-only display name of the user or group.\nRead-only name of the user or group.\nUser and user groups"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserOrGroup",
        "title": "Models > User and user groups > UserOrGroup",
        "section": "User and user groups > UserOrGroup",
        "text": "class UserOrGroup\n\nDescription of a Granta MI User or Group.\n\nRead-only - do not directly instantiate or modify instances of this class.\n\n!! processed by numpydoc !!\n\n\n\n\n\nproperty identifier: str | None\n\nRead-only identifier of the user or group.\n\n!! processed by numpydoc !!\n\n\n\nproperty display_name: str | None\n\nRead-only display name of the user or group.\n\n!! processed by numpydoc !!\n\n\n\nproperty name: str | None\n\nRead-only name of the user or group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserOrGroup.identifier",
        "title": "Models > User and user groups > identifier",
        "section": "User and user groups > identifier",
        "text": "property identifier: str | None\n\nRead-only identifier of the user or group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserOrGroup.display_name",
        "title": "Models > User and user groups > display_name",
        "section": "User and user groups > display_name",
        "text": "property display_name: str | None\n\nRead-only display name of the user or group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserOrGroup.name",
        "title": "Models > User and user groups > name",
        "section": "User and user groups > name",
        "text": "property name: str | None\n\nRead-only name of the user or group.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#search-criteria",
        "title": "Models > Search criteria",
        "section": "Search criteria",
        "text": "Search criterion to use in a search_for_lists() operation.\nThe properties in this class represent an AND search - only lists that match all the\nnon-null properties will be returned.\nTo filter record lists based on their name and status:\nTo filter record lists based on whether they include items from specific databases:\nTo filter record lists based on whether they include items from specific tables:\nLimits results to lists whose name contains the provided string.\nLimits results to lists on which the user has the specified role.\nLimits results to lists with a specific publication status.\nSet to True to include only record lists that are published.\nSet to False to include only record lists that are not published.\nDefault value None will include both.\nLimits results to lists with a specific approval status.\nSet to True to include only record lists that are awaiting approval.\nSet to False to include only record lists that are not awaiting approval.\nDefault value None will include both.\nLimits results to lists which are internal.\nSet to True to include only internal record lists.\nSet to False to include only non-internal record lists.\nDefault value None will include both.\nLimits results to lists which are revisions.\nSet to True to include only record lists that are revisions of another list.\nSet to False to include only record lists that are not revisions.\nDefault value None will include both.\nLimits results to lists containing records in databases specified by GUIDs.\nLimits results to lists containing records in integration schemas specified by GUIDs.\nLimits results to lists containing records in tables specified by GUIDs.\nLimits results to lists containing records specified by their history GUIDs.\nLimits results to lists where the current user can add or remove items.\nSearch criterion to use in a search operation search_for_lists().\nUse this class to combine multiple SearchCriterion or\nBooleanCriterion objects together as either AND or OR searches. When both match_any\nand match_all are used together, results match all criterion from match_all AND at least one\ncriterion from match_any.\nSearch record lists and obtain the union of multiple criteria (OR):\nSearch record lists and obtain the intersection of multiple criteria (AND):\nLimits results to lists which satisfy one or more provided criteria.\nLimits results to lists which satisfy all provided criteria.\nRoles a user can have on a record list.\nCan be used in SearchCriterion.user_role.\nUserRole is currently only supported in searches. Searching for lists with user\nrole = NONE as criteria would exclude all lists from the results.\nSearch criteria\nsearch_for_lists()\nTrue\nFalse\nNone\nTrue\nFalse\nNone\nTrue\nFalse\nNone\nTrue\nFalse\nNone\nsearch_for_lists()\nSearchCriterion\nBooleanCriterion\nmatch_any\nmatch_all\nmatch_all\nmatch_any\npython:list\nBooleanCriterion\nSearchCriterion\npython:None\npython:list\nBooleanCriterion\nSearchCriterion\npython:None\nSearchCriterion.user_role\nUserRole\nNONE"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion",
        "title": "Models > Search criteria > SearchCriterion",
        "section": "Search criteria > SearchCriterion",
        "text": "class SearchCriterion(name_contains=None, user_role=None, is_published=None, is_awaiting_approval=None, is_internal_use=None, is_revision=None, contains_records_in_databases=None, contains_records_in_integration_schemas=None, contains_records_in_tables=None, contains_records=None, user_can_add_or_remove_items=None)\n\nSearch criterion to use in a search_for_lists() operation.\n\nThe properties in this class represent an AND search - only lists that match all the\nnon-null properties will be returned.\n\nExamples\n\nTo filter record lists based on their name and status:\n\n>>> criterion = SearchCriterion(\n...     name_contains=\"Approved materials\",\n...     is_published=True,\n... )\n\nTo filter record lists based on whether they include items from specific databases:\n\n>>> criterion = SearchCriterion(\n...     contains_records_in_databases=[\"9f6182ee-1f49-4ba9-9bd7-d4c0a392e94e\"],\n... )\n\nTo filter record lists based on whether they include items from specific tables:\n\n>>> criterion = SearchCriterion(\n...     contains_records_in_tables=[\"9f6182ee-1f49-4ba9-9bd7-d4c0a392e94e\"],\n... )\n\n!! processed by numpydoc !!\n\n\n\n\n\nproperty name_contains: str | None\n\nLimits results to lists whose name contains the provided string.\n\n!! processed by numpydoc !!\n\n\n\nproperty user_role: UserRole | None\n\nLimits results to lists on which the user has the specified role.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_published: bool | None\n\nLimits results to lists with a specific publication status.\n\nSet to True to include only record lists that are published.\nSet to False to include only record lists that are not published.\nDefault value None will include both.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_awaiting_approval: bool | None\n\nLimits results to lists with a specific approval status.\n\nSet to True to include only record lists that are awaiting approval.\nSet to False to include only record lists that are not awaiting approval.\nDefault value None will include both.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_internal_use: bool | None\n\nLimits results to lists which are internal.\n\nSet to True to include only internal record lists.\nSet to False to include only non-internal record lists.\nDefault value None will include both.\n\n!! processed by numpydoc !!\n\n\n\nproperty is_revision: bool | None\n\nLimits results to lists which are revisions.\n\nSet to True to include only record lists that are revisions of another list.\nSet to False to include only record lists that are not revisions.\nDefault value None will include both.\n\n!! processed by numpydoc !!\n\n\n\nproperty contains_records_in_databases: List[str] | None\n\nLimits results to lists containing records in databases specified by GUIDs.\n\n!! processed by numpydoc !!\n\n\n\nproperty contains_records_in_integration_schemas: List[str] | None\n\nLimits results to lists containing records in integration schemas specified by GUIDs.\n\n!! processed by numpydoc !!\n\n\n\nproperty contains_records_in_tables: List[str] | None\n\nLimits results to lists containing records in tables specified by GUIDs.\n\n!! processed by numpydoc !!\n\n\n\nproperty contains_records: List[str] | None\n\nLimits results to lists containing records specified by their history GUIDs.\n\n!! processed by numpydoc !!\n\n\n\nproperty user_can_add_or_remove_items: bool | None\n\nLimits results to lists where the current user can add or remove items.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.name_contains",
        "title": "Models > Search criteria > name_contains",
        "section": "Search criteria > name_contains",
        "text": "property name_contains: str | None\n\nLimits results to lists whose name contains the provided string.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.user_role",
        "title": "Models > Search criteria > user_role",
        "section": "Search criteria > user_role",
        "text": "property user_role: UserRole | None\n\nLimits results to lists on which the user has the specified role.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.is_published",
        "title": "Models > Search criteria > is_published",
        "section": "Search criteria > is_published",
        "text": "property is_published: bool | None\n\nLimits results to lists with a specific publication status.\n\nSet to True to include only record lists that are published.\nSet to False to include only record lists that are not published.\nDefault value None will include both.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.is_awaiting_approval",
        "title": "Models > Search criteria > is_awaiting_approval",
        "section": "Search criteria > is_awaiting_approval",
        "text": "property is_awaiting_approval: bool | None\n\nLimits results to lists with a specific approval status.\n\nSet to True to include only record lists that are awaiting approval.\nSet to False to include only record lists that are not awaiting approval.\nDefault value None will include both.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.is_internal_use",
        "title": "Models > Search criteria > is_internal_use",
        "section": "Search criteria > is_internal_use",
        "text": "property is_internal_use: bool | None\n\nLimits results to lists which are internal.\n\nSet to True to include only internal record lists.\nSet to False to include only non-internal record lists.\nDefault value None will include both.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.is_revision",
        "title": "Models > Search criteria > is_revision",
        "section": "Search criteria > is_revision",
        "text": "property is_revision: bool | None\n\nLimits results to lists which are revisions.\n\nSet to True to include only record lists that are revisions of another list.\nSet to False to include only record lists that are not revisions.\nDefault value None will include both.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.contains_records_in_databases",
        "title": "Models > Search criteria > contains_records_in_databases",
        "section": "Search criteria > contains_records_in_databases",
        "text": "property contains_records_in_databases: List[str] | None\n\nLimits results to lists containing records in databases specified by GUIDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.contains_records_in_integration_schemas",
        "title": "Models > Search criteria > contains_records_in_integration_schemas",
        "section": "Search criteria > contains_records_in_integration_schemas",
        "text": "property contains_records_in_integration_schemas: List[str] | None\n\nLimits results to lists containing records in integration schemas specified by GUIDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.contains_records_in_tables",
        "title": "Models > Search criteria > contains_records_in_tables",
        "section": "Search criteria > contains_records_in_tables",
        "text": "property contains_records_in_tables: List[str] | None\n\nLimits results to lists containing records in tables specified by GUIDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.contains_records",
        "title": "Models > Search criteria > contains_records",
        "section": "Search criteria > contains_records",
        "text": "property contains_records: List[str] | None\n\nLimits results to lists containing records specified by their history GUIDs.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchCriterion.user_can_add_or_remove_items",
        "title": "Models > Search criteria > user_can_add_or_remove_items",
        "section": "Search criteria > user_can_add_or_remove_items",
        "text": "property user_can_add_or_remove_items: bool | None\n\nLimits results to lists where the current user can add or remove items.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.BooleanCriterion",
        "title": "Models > Search criteria > BooleanCriterion",
        "section": "Search criteria > BooleanCriterion",
        "text": "class BooleanCriterion(match_any=None, match_all=None)\n\nSearch criterion to use in a search operation search_for_lists().\n\nUse this class to combine multiple SearchCriterion or\nBooleanCriterion objects together as either AND or OR searches. When both match_any\nand match_all are used together, results match all criterion from match_all AND at least one\ncriterion from match_any.\n\nExamples\n\nSearch record lists and obtain the union of multiple criteria (OR):\n\n>>> criterion = BooleanCriterion(\n...     match_any=[\n...         SearchCriterion(name_contains=\"Approved materials\"),\n...         SearchCriterion(is_published=True),\n...     ]\n... )\n\nSearch record lists and obtain the intersection of multiple criteria (AND):\n\n>>> criterion = BooleanCriterion(\n...     match_all=[\n...         SearchCriterion(name_contains=\"Approved materials\"),\n...         SearchCriterion(is_published=True),\n...     ]\n... )\n\n!! processed by numpydoc !!\n\n\n\n\n\nproperty match_any: List[BooleanCriterion | SearchCriterion] | None\n\nLimits results to lists which satisfy one or more provided criteria.\n\nReturns\n\npython:list of BooleanCriterion | SearchCriterion, or python:None\n\n\n\n!! processed by numpydoc !!\n\n\n\nproperty match_all: List[BooleanCriterion | SearchCriterion] | None\n\nLimits results to lists which satisfy all provided criteria.\n\nReturns\n\npython:list of BooleanCriterion | SearchCriterion, or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.BooleanCriterion.match_any",
        "title": "Models > Search criteria > match_any",
        "section": "Search criteria > match_any",
        "text": "property match_any: List[BooleanCriterion | SearchCriterion] | None\n\nLimits results to lists which satisfy one or more provided criteria.\n\nReturns\n\npython:list of BooleanCriterion | SearchCriterion, or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.BooleanCriterion.match_all",
        "title": "Models > Search criteria > match_all",
        "section": "Search criteria > match_all",
        "text": "property match_all: List[BooleanCriterion | SearchCriterion] | None\n\nLimits results to lists which satisfy all provided criteria.\n\nReturns\n\npython:list of BooleanCriterion | SearchCriterion, or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserRole",
        "title": "Models > Search criteria > UserRole",
        "section": "Search criteria > UserRole",
        "text": "class UserRole(value)\n\nRoles a user can have on a record list.\n\nCan be used in SearchCriterion.user_role.\n\n!! processed by numpydoc !!\n\n\n\nNONE = 'None'\n\nUserRole is currently only supported in searches. Searching for lists with user\nrole = NONE as criteria would exclude all lists from the results.\n\n!! processed by numpydoc !!\n\n\n\nOWNER = 'Owner'\n\n\n\n\n\nSUBSCRIBER = 'Subscriber'\n\n\n\n\n\nCURATOR = 'Curator'\n\n\n\n\n\nADMINISTRATOR = 'Administrator'\n\n\n\n\n\nPUBLISHER = 'Publisher'\n\n"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserRole.NONE",
        "title": "Models > Search criteria > NONE",
        "section": "Search criteria > NONE",
        "text": "NONE = 'None'\n\nUserRole is currently only supported in searches. Searching for lists with user\nrole = NONE as criteria would exclude all lists from the results.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserRole.OWNER",
        "title": "Models > Search criteria > OWNER",
        "section": "Search criteria > OWNER",
        "text": "OWNER = 'Owner'\n\n"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserRole.SUBSCRIBER",
        "title": "Models > Search criteria > SUBSCRIBER",
        "section": "Search criteria > SUBSCRIBER",
        "text": "SUBSCRIBER = 'Subscriber'\n\n"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserRole.CURATOR",
        "title": "Models > Search criteria > CURATOR",
        "section": "Search criteria > CURATOR",
        "text": "CURATOR = 'Curator'\n\n"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserRole.ADMINISTRATOR",
        "title": "Models > Search criteria > ADMINISTRATOR",
        "section": "Search criteria > ADMINISTRATOR",
        "text": "ADMINISTRATOR = 'Administrator'\n\n"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.UserRole.PUBLISHER",
        "title": "Models > Search criteria > PUBLISHER",
        "section": "Search criteria > PUBLISHER",
        "text": "PUBLISHER = 'Publisher'\n\n"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#search-results",
        "title": "Models > Search results",
        "section": "Search results",
        "text": "Describes the result of a search.\nRead-only - do not directly instantiate or modify instances of this class.\nDetails of the record list associated with the search result.\nItems of the record list associated with the search result.\nWill be None unless include_items has been specified in\nsearch_for_lists()\nSearch results\nNone\ninclude_items\nsearch_for_lists()"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchResult",
        "title": "Models > Search results > SearchResult",
        "section": "Search results > SearchResult",
        "text": "class SearchResult(record_list, items)\n\nDescribes the result of a search.\n\nRead-only - do not directly instantiate or modify instances of this class.\n\n!! processed by numpydoc !!\n\n\n\n\n\nproperty record_list: RecordList\n\nDetails of the record list associated with the search result.\n\n!! processed by numpydoc !!\n\n\n\nproperty items: List[RecordListItem] | None\n\nItems of the record list associated with the search result.\n\nWill be None unless include_items has been specified in\nsearch_for_lists()\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchResult.record_list",
        "title": "Models > Search results > record_list",
        "section": "Search results > record_list",
        "text": "property record_list: RecordList\n\nDetails of the record list associated with the search result.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "api/models",
        "href": "api/models.html#ansys.grantami.recordlists.SearchResult.items",
        "title": "Models > Search results > items",
        "section": "Search results > items",
        "text": "property items: List[RecordListItem] | None\n\nItems of the record list associated with the search result.\n\nWill be None unless include_items has been specified in\nsearch_for_lists()\n\n!! processed by numpydoc !!"
    }
]